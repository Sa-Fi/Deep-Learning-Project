# -*- coding: utf-8 -*-
"""Digit Recognition using CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C-oV1LB0hqBEf-SsjJdTEEYq0cGgdCWM
"""

import numpy as np
import matplotlib.pyplot as plt 
import keras 
from keras.models import Model
from keras import backend as k
from keras.layers import Flatten,Conv2D,Dense,Dropout,MaxPooling2D

import tensorflow
(x_train, y_train), (x_test, y_test) = tensorflow.keras.datasets.mnist.load_data()

# check size of training and testing data
print("x_train : ",x_train.shape)
print("x_test : ",x_test.shape)
print("y_train : ",y_train.shape)
print("y_test : ",y_test.shape)

# show soome image 
plt.figure(figsize=(16,16))
j=1
for i in range(25):
  plt.subplot(5,5,j)
  j=j+1
  plt.imshow(x_train[i],cmap='Greys')
  
plt.show()

#print("Dimension ",x_train.ndims)
print("Shape ",x_train.shape)

# reshape dataset to have a single channel 
img_rows,img_cols=28,28
x_train = x_train.reshape(x_train.shape[0],1,img_rows,img_cols)
x_test = x_test.reshape(x_test.shape[0],1,img_rows,img_cols)
x_test.shape

print("x_train type ",type(x_train))
print(x_train[0])

# convert from integer to float 
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
print(x_train[0])

# data normalization 
x_train = x_train/255
x_test = x_test/255
x_train[0].round(2)

# convert class vector to binary class matrics or one hot encoding target values 
y_train = keras.utils.to_categorical(y_train)
y_test = keras.utils.to_categorical(y_test)
y_train[0]

# create the conv layer 
model = keras.Sequential()
# add input layer
model.add(Conv2D(32,3,activation='relu',input_shape=(28,28,1)))
# add first hidden layer with maxpooling
model.add(Conv2D(64,3,activation='relu'))
model.add(MaxPooling2D(pool_size=(3,3)))

# to prevent overfiting add dropout layer 
model.add(Dropout(0.5))

# to create 1d array for fully connected layer add flatten layer 
model.add(Flatten())


#add fully connected layer 
model.add(Dense(250,activation='sigmoid'))

# add the output layer here we will precdict 10 number so the units will be 10 
model.add(Dense(10,activation='softmax'))

model.summary()

# compilaton process of the model 
model.compile(optimizer=tensorflow.keras.optimizers.Adadelta(),
              loss = keras.losses.categorical_crossentropy,
              metrics=['Accuracy'])

# x_train = np.expand_dims(x_train,-1)
# x_test = np.expand_dims(x_test,-1)
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

import tensorflow as tf
tf.config.run_functions_eagerly(True)
model.fit(x_train,
          y_train,
          validation_data=(x_test,y_test),
          epochs=15,
          batch_size=50,
          verbose=1)

score = model.evaluate(x_test,y_test)
print("Accuracy ",score[1])

# single value prediction in number 
prediction = model.predict(x_test)
print("Higest score",(prediction[3]))
print("Higest index",np.argmax(prediction[3]))

plt.imshow(x_test[3].reshape(28,28),cmap='Greys')
plt.show()

# Making the Confusion Matrix
# from sklearn.metrics import confusion_matrix
# import seaborn as sns
# prediction = (prediction > 0.5) #greater than 0.50 on scale 0 to 1
# print(prediction)
# cm = confusion_matrix(y_test, prediction)

# sns.heatmap(cm,annot=True)
# plt.savefig('h.png')