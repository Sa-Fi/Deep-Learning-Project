# -*- coding: utf-8 -*-
"""CATs & Dog Detect using CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zy4kN50GKnvpPZRTQ3T1AUvsiUuUP6eH
"""

# importing the keras libraries and packages
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

# initializing the CNN 
model = Sequential()

# Step 1 Convolution 
model.add(Conv2D(32,3,3,input_shape=(64,64,3),activation='relu'))
# Step 2 Pooling 
model.add(MaxPooling2D(pool_size=(2, 2)))

# second layers convolution and pooling 
# Convolution
model.add(Conv2D(16,3,3,activation='relu'))
# Pooling 
model.add(MaxPooling2D(pool_size=(2,2)))


# step 3 Flatting 
model.add(Flatten())

# step 4 create fully connected layer or Dense layer
model.add(Dense(128,activation='relu'))
model.add(Dense(1,activation='sigmoid'))

# Step 5 compiling the model 
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['Accuracy'])

# prepare the training and testing Data from the flow of directory
from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory(
        '/content/drive/MyDrive/ML & DL dataset/dataset/training_set',
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

testing_set = test_datagen.flow_from_directory(
        '/content/drive/MyDrive/ML & DL dataset/dataset/test_set',
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

model.fit(
        training_set,
        steps_per_epoch=8000,
        epochs=10,
        validation_data=testing_set,
        validation_steps=2000,
        verbose=1)

from tensorflow.python import image
# predict value 
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
test_img = image.load_image('/content/drive/MyDrive/ML & DL dataset/dataset/single_prediction/cat_or_dog_1.jpg',target_size=(64,64))
test_img = image.img_to_array(test_img)
test_img = np.expand_dims(test_img,axis=0)
result = model.predict(test_img)
# training_set.class_indices
if result[0][0] == 1:
  print('Dog')
else:
  print('Cat')