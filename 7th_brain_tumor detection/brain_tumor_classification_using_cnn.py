# -*- coding: utf-8 -*-
"""brain tumor classification using CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WMHhDdSlTkv6OO088wxaeHEeAqMS8g9n
"""

#upload the kaggle json
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!kaggle datasets download -d sartajbhuvaji/brain-tumor-classification-mri

# unzip the file 
import zipfile
zip_ref = zipfile.ZipFile('/content/brain-tumor-classification-mri.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

!ls

import keras
from keras.models import Sequential
from keras.layers import Conv2D,Flatten,Dense,MaxPooling2D,Dropout
from sklearn.metrics import accuracy_score

import ipywidgets as widgets
import io
from PIL import Image
import tqdm
from sklearn.model_selection import train_test_split
import cv2
from sklearn.utils import shuffle
import tensorflow as tf
import os
import numpy as np

"""append data in x and y variable """

x = []
y = []
image_size = 150
labels = ['glioma_tumor','meningioma_tumor','no_tumor','pituitary_tumor']
for i in labels:
  folder_path = os.path.join('/content/Training/',i)
  for j in os.listdir(folder_path):
    img = cv2.imread(os.path.join(folder_path,j))
    img = cv2.resize(img,(image_size,image_size))
    x.append(img)
    y.append(i)


for i in labels:
  folder_path = os.path.join('/content/Testing/',i)
  for j in os.listdir(folder_path):
    img = cv2.imread(os.path.join(folder_path,j))
    img = cv2.resize(img,(image_size,image_size))
    x.append(img)
    y.append(i)


x_train = np.array(x)
y_train = np.array(y)

x_train,y_train = shuffle(x_train,y_train,random_state = 101)
x_train.shape

x_train,x_test,y_train,y_test = train_test_split(x_train,y_train,test_size = 0.1,random_state =101)

y_train_new = []
for i in y_train:
  y_train_new.append(labels.index(i))
y_train = y_train_new
y_train = tf.keras.utils.to_categorical(y_train)

y_test_new = []
for i in y_test:
  y_test_new.append(labels.index(i))
y_test = y_test_new
y_test = tf.keras.utils.to_categorical(y_test)

# build the model 
model = Sequential()
model.add(Conv2D(32,(3,3),activation = 'relu',input_shape=(150,150,3)))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.3))

model.add(Conv2D(64,(3,3),activation='relu'))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(Dropout(0.3))
model.add(MaxPooling2D(2,2))

model.add(Dropout(0.3))
model.add(Conv2D(128,(3,3),activation='relu'))
model.add(Conv2D(128,(3,3),activation='relu'))
model.add(Conv2D(128,(3,3),activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.3))

model.add(Conv2D(128,(3,3),activation='relu'))
model.add(Conv2D(256,(3,3),activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.3))

model.add(Flatten())
model.add(Dense(512,activation = 'relu'))
model.add(Dense(512,activation = 'relu'))
model.add(Dropout(0.3))
model.add(Dense(4,activation='softmax'))

model.compile(optimizer = 'adam',loss = 'categorical_crossentropy',metrics = ['acc'])

history = model.fit(x_train,y_train,epochs = 20,validation_split=0.1)

import matplotlib.pyplot as plt
import seaborn as sns

acc = history.history['acc']
val_acc = history.history['val_acc']
epochs = range(len(acc))
fig = plt.figure(figsize=(7,7))
plt.plot(epochs,acc,'r',label="Training Accuracy")
plt.plot(epochs,val_acc,'b',label="Validation Accuracy")
plt.legend(loc='upper left')
plt.show()

loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(len(loss))
fig = plt.figure(figsize=(7,7))
plt.plot(epochs,loss,'r',label="Training loss")
plt.plot(epochs,val_loss,'b',label="Validation loss")
plt.legend(loc='upper left')
plt.show()

from google.colab.patches import cv2_imshow

input_image_path = input("Give the image path :")
img = cv2.imread(input_image_path)
img = cv2.resize(img,(150,150))
img_array = np.array(img)
img_array = img_array.reshape(1,150,150,3)

from tensorflow.keras.preprocessing import image
plt.figure(figsize=(4,3))
img = image.load_img(input_image_path)
plt.imshow(img,interpolation='nearest')
plt.axis('off')
plt.show()

a=model.predict(img_array)
indices = a.argmax()
indices
print(labels[indices])

model.save('/content/drive/MyDrive/save model/brain_tumor_detection_using_cnn.h5')

