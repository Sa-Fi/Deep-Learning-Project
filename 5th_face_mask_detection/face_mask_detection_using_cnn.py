# -*- coding: utf-8 -*-
"""Face Mask Detection using CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L3hfLPYrprmhiyiM1alIFdw87YIWwVOv
"""

#upload the kaggle json
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

# load the dataset from kaggle
!kaggle datasets download -d omkargurav/face-mask-dataset

# unzip the file 
import zipfile
zip_ref = zipfile.ZipFile('/content/face-mask-dataset.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

!ls

#import all the necessary libraries
import os # for accessing the files 
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg # visualize and process the image
import cv2 # open cv
from google.colab.patches import cv2_imshow # per cell e img show korar jnno within this window
from PIL import Image #read images and do some processes on it 
from sklearn.model_selection import train_test_split

with_mask_file = os.listdir('/content/data/with_mask')
print(with_mask_file[0:5])
print(with_mask_file[-5:])

without_mask_file = os.listdir('//content/data/without_mask')
print(without_mask_file[0:5])
print(without_mask_file[-5:])

print('Number of with Mask Images :',len(with_mask_file))
print('Number of without Mask Images :',len(without_mask_file))

"""Creating level with 2 class of image<br>
1 with mask <br>
0 without mask 
"""

with_mask_labels = [1]*3725
without_mask_labels = [0]*3828

print(with_mask_labels[0:5])
print(without_mask_labels[0:5])

print(len(with_mask_labels))
print(len(without_mask_labels))

labels = with_mask_labels + without_mask_labels
print(len(labels))
print(labels[0:5])
print(labels[-5:])

"""Displaying the image """

plt.figure(figsize=(3,3))
img = mpimg.imread('/content/data/with_mask/with_mask_1001.jpg')
plt.imshow(img)
plt.legend()
plt.show()

plt.figure(figsize=(3,3))
img = mpimg.imread('/content/data/without_mask/without_mask_1001.jpg')
plt.imshow(img)
plt.legend()
plt.show()

"""Image processing <br>
resize the image <br>
convert the images into numpy arrays 
"""

# Convert img the image into numpy arrays 


with_mask_path = '/content/data/with_mask/'


data=[]

for image_file in with_mask_file:
  image = Image.open(with_mask_path + image_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)


without_mask_path = '/content/data/without_mask/'

for image_file in without_mask_file:
  image = Image.open(without_mask_path + image_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

type(data)

len(data)

data[0]

type(data[0])

print("Shape of the image :",data[0].shape)

print(type(labels))

# convert the image and label into numpy arrays 
x = np.array(data)
y = np.array(labels)
print("type of x independent varible which contain images :",type(x))
print("type of y dependent variable which contain the image label (with mask/without mask)",type(y))

x[0]

y[0]

print("The shape of x :",x.shape)
print("The shape of y :",y.shape)

"""Now spltting the data for training and tesing """

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state=2)

print("x shape ",x.shape)
print("x_train shape ",x_train.shape)
print("x_test shape ",x_test.shape)

print("y shape ",y.shape)
print("y_train shape ",y_train.shape)
print("y_test shape ",y_test.shape)

"""Scaling the data"""

x_train_scaled = x_train/255
x_test_scaled = x_test/255
print("x_train before scaling ",x_train[0])
print("x_train after scaling ",x_train_scaled[0].round(2))

"""Building our CNN model """

import tensorflow as tf
from tensorflow import keras 
from keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout

from keras.engine.sequential import Sequential
model = Sequential()
#1st layer 
model.add(Conv2D(32,kernel_size =(3,3),strides=(1,1),activation='relu',input_shape=(128,128,3)))
model.add(MaxPooling2D(pool_size=(2,2)))


#2nd layer
model.add(Conv2D(64,kernel_size=(3,3),strides=(1,1),activation='relu'))
model.add(MaxPooling2D(pool_size = (2,2)))

#flatten layer 
model.add(Flatten())

#Dense layer 
model.add(Dense(128,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(64, activation= 'relu'))
model.add(Dropout(0.5))

model.add(Dense(2,activation='sigmoid'))

#compile the model
model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

history = model.fit(x_train_scaled,
                    y_train,
                    validation_split=0.1,
                    epochs=10)

"""model evaluation """

loss,accuracy = model.evaluate(x_test_scaled,y_test)
print("Loss ",loss)
print("Accuracy",accuracy)

h = history
#plot the accuracy value 
plt.plot(h.history['accuracy'],label='train accuracy')
plt.plot(h.history['val_accuracy'],label = 'validation accuracy')
plt.legend()
plt.show()

#plot the loss value 
plt.plot(h.history['loss'],label = 'train loss')
plt.plot(h.history['val_loss'],label = 'validation loss')
plt.legend()
plt.show()

"""Predicted the model"""

input_image_path = input("Give the image path :")
take_image = cv2.imread(input_image_path)

cv2_imshow(take_image)

take_image_resize = cv2.resize(take_image,(128,128))
take_image_scaled = take_image_resize/255
take_image_reshape = np.reshape(take_image_scaled,[1,128,128,3])
prediction = model.predict(take_image_reshape)


print("Probability of wiring mask or not",prediction)

label_prediction = np.argmax(prediction)
print("label prediction ",label_prediction)

if label_prediction ==1:
  print('The person in the image is wearing a mask')
else:
  print('The person in the image is not wearing a mask')

model.save('/content/drive/MyDrive/Deep learning Save model/Face mask detection using CNN.h5')

